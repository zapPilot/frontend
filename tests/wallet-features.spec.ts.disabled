import { test, expect } from "@playwright/test";
import { testWithHelpers } from "./helpers/test-utils";

/**
 * Wallet Features Tests - Test new ZapIn/ZapOut functionality and wallet interactions
 * These tests focus on the recently implemented features
 */

testWithHelpers.describe("Wallet Portfolio Features", () => {
  testWithHelpers.beforeEach(async ({ pageHelper }) => {
    await pageHelper.setupPage();
  });

  testWithHelpers("wallet portfolio renders basic elements", async ({ page }) => {
    // Wait for wallet content to load
    await page.waitForFunction(() => {
      return document.body.textContent?.includes("Wallet") ||
             document.body.textContent?.includes("Portfolio") ||
             document.body.textContent?.includes("Balance");
    }, { timeout: 10000 });

    // Should have portfolio-related content
    const hasWalletContent = await page.evaluate(() => {
      const text = document.body.textContent || "";
      return text.includes("Wallet") || 
             text.includes("Portfolio") || 
             text.includes("Balance") ||
             text.includes("Total");
    });

    expect(hasWalletContent).toBe(true);
  });

  testWithHelpers("wallet action buttons are present", async ({ page }) => {
    // Wait for content to load
    await page.waitForTimeout(2000);

    // Look for action buttons (ZapIn, ZapOut, Optimize)
    const hasActionButtons = await page.evaluate(() => {
      const buttons = document.querySelectorAll('button');
      const buttonTexts = Array.from(buttons).map(b => b.textContent?.toLowerCase() || "");
      
      return buttonTexts.some(text => 
        text.includes("zapin") || 
        text.includes("zapout") || 
        text.includes("optimize") ||
        text.includes("invest")
      );
    });

    expect(hasActionButtons).toBe(true);
  });

  testWithHelpers("wallet buttons have proper cursor styling", async ({ page }) => {
    await page.waitForTimeout(2000);

    // Check that interactive buttons have cursor pointer
    const buttonsHaveCursor = await page.evaluate(() => {
      const buttons = document.querySelectorAll('button[class*="cursor-pointer"]');
      return buttons.length > 0;
    });

    expect(buttonsHaveCursor).toBe(true);
  });

  testWithHelpers("portfolio displays mock data", async ({ page }) => {
    await page.waitForTimeout(2000);

    // Should display some financial data (numbers, currency symbols)
    const hasFinancialData = await page.evaluate(() => {
      const text = document.body.textContent || "";
      const hasCurrency = text.includes("$") || text.includes("%");
      const hasNumbers = /\d+/.test(text);
      return hasCurrency && hasNumbers;
    });

    expect(hasFinancialData).toBe(true);
  });
});

testWithHelpers.describe("ZapIn/ZapOut Navigation", () => {
  testWithHelpers("optimize button functionality", async ({ page }) => {
    await page.waitForTimeout(2000);

    // Look for optimize button and try to click it
    try {
      const optimizeButton = page.locator('button').filter({ hasText: /optimize/i }).first();
      
      if (await optimizeButton.isVisible()) {
        await optimizeButton.click();
        
        // Should navigate to some form of optimization interface
        await page.waitForTimeout(1000);
        
        // Page should still be functional after click
        await expect(page.locator('main')).toBeVisible();
      }
    } catch (error) {
      // If optimize button interaction fails, page should still work
      await expect(page.locator('main')).toBeVisible();
    }
  });

  testWithHelpers("zapin button creates navigation context", async ({ page }) => {
    await page.waitForTimeout(2000);

    // Look for ZapIn button
    try {
      const zapInButton = page.locator('button').filter({ hasText: /zapin/i }).first();
      
      if (await zapInButton.isVisible()) {
        await zapInButton.click();
        
        // Should navigate to swap interface
        await page.waitForTimeout(1000);
        
        // Check if we're in swap page context
        const inSwapContext = await page.evaluate(() => {
          const text = document.body.textContent || "";
          return text.includes("Swap") || 
                 text.includes("Strategy") || 
                 text.includes("Select") ||
                 text.includes("ZapIn");
        });

        expect(inSwapContext).toBe(true);
      }
    } catch (error) {
      // If ZapIn fails, page should remain functional
      await expect(page.locator('main')).toBeVisible();
    }
  });

  testWithHelpers("zapout button creates navigation context", async ({ page }) => {
    await page.waitForTimeout(2000);

    // Look for ZapOut button
    try {
      const zapOutButton = page.locator('button').filter({ hasText: /zapout/i }).first();
      
      if (await zapOutButton.isVisible()) {
        await zapOutButton.click();
        
        // Should navigate to swap interface
        await page.waitForTimeout(1000);
        
        // Check if we're in swap context
        const inSwapContext = await page.evaluate(() => {
          const text = document.body.textContent || "";
          return text.includes("Swap") || 
                 text.includes("Strategy") || 
                 text.includes("Select") ||
                 text.includes("ZapOut");
        });

        expect(inSwapContext).toBe(true);
      }
    } catch (error) {
      // If ZapOut fails, page should remain functional
      await expect(page.locator('main')).toBeVisible();
    }
  });
});

testWithHelpers.describe("Swap Page Context Awareness", () => {
  testWithHelpers("swap page handles navigation context", async ({ page }) => {
    await page.waitForTimeout(2000);

    // Try to access swap functionality
    try {
      // Look for any button that might lead to swap
      const swapTrigger = page.locator('button').filter({ 
        hasText: /zapin|zapout|optimize|invest/i 
      }).first();
      
      if (await swapTrigger.isVisible()) {
        await swapTrigger.click();
        await page.waitForTimeout(1000);

        // Should have swap-related elements
        const hasSwapElements = await page.evaluate(() => {
          return document.querySelector('[data-testid*="swap"]') !== null ||
                 document.body.textContent?.includes("From") ||
                 document.body.textContent?.includes("To") ||
                 document.body.textContent?.includes("Strategy");
        });

        expect(hasSwapElements).toBe(true);
      }
    } catch (error) {
      // If swap access fails, basic functionality should work
      await expect(page.locator('main')).toBeVisible();
    }
  });

  testWithHelpers("strategy selector modal can open", async ({ page }) => {
    await page.waitForTimeout(2000);

    // Try to trigger strategy selection
    try {
      // Look for ZapIn button specifically
      const zapInButton = page.locator('button').filter({ hasText: /zapin/i }).first();
      
      if (await zapInButton.isVisible()) {
        await zapInButton.click();
        await page.waitForTimeout(1000);

        // Look for strategy selector button
        const strategySelectorButton = page.getByTestId('strategy-selector-button');
        
        if (await strategySelectorButton.isVisible()) {
          await strategySelectorButton.click();
          
          // Should open modal
          await page.waitForTimeout(500);
          
          const hasModal = await page.evaluate(() => {
            return document.querySelector('[data-testid*="strategy-selector"]') !== null ||
                   document.body.textContent?.includes("Select Strategy");
          });

          expect(hasModal).toBe(true);
        }
      }
    } catch (error) {
      // If strategy selector fails, page should work
      await expect(page.locator('main')).toBeVisible();
    }
  });
});

testWithHelpers.describe("UI Component Interactions", () => {
  testWithHelpers("buttons have hover effects", async ({ page }) => {
    await page.waitForTimeout(2000);

    // Check that buttons have hover styling
    const hasHoverEffects = await page.evaluate(() => {
      const buttons = document.querySelectorAll('button');
      for (const button of buttons) {
        if (button.className.includes('hover:') || 
            button.className.includes('transition')) {
          return true;
        }
      }
      return false;
    });

    expect(hasHoverEffects).toBe(true);
  });

  testWithHelpers("gradient buttons render correctly", async ({ page }) => {
    await page.waitForTimeout(2000);

    // Check for gradient styling on buttons
    const hasGradientButtons = await page.evaluate(() => {
      const buttons = document.querySelectorAll('button');
      for (const button of buttons) {
        if (button.className.includes('bg-gradient-to-r') || 
            button.className.includes('gradient')) {
          return true;
        }
      }
      return false;
    });

    expect(hasGradientButtons).toBe(true);
  });

  testWithHelpers("interactive elements are accessible", async ({ page }) => {
    await page.waitForTimeout(2000);

    // Check that interactive elements have proper attributes
    const hasAccessibleElements = await page.evaluate(() => {
      const interactiveElements = document.querySelectorAll('button, [role="button"]');
      return interactiveElements.length > 0;
    });

    expect(hasAccessibleElements).toBe(true);
  });
});